{"name":"Easy URL Routing with AngularJS","tagline":"","body":"### Who am I?\r\n\r\n* Educated in _the_ full-stack: Low-level microchip design, processor architecture, web: back-end, front-end, UI/UX.\r\n* Jack-of-all-trades? Not really.\r\n* **Web Architect**. For most of my career so far.\r\n* Front-end (my preferred zone): Visually appealing, immediate gratification, human interaction.\r\n* Back-end (occasional forays): Delayed gratification, can get researchy.\r\n* Microchips/Hardware: Heavily delayed gratification, 'nuf said for me.\r\n* Technical debt collector.\r\n* Wantrapreneur, in a good way :)\r\n\r\n___\r\n## Easy URL Routing with AngularJS\r\n\r\n### Goals\r\n* URL Routing Service\r\n* Drive web application state from the URL\r\n\r\n### Why?\r\n* Browsing within a Single Page Application\r\n* Supporting browser back, forward, refresh buttons\r\n* Bookmarking and linking from other pages\r\n\r\n### When?\r\n2013, supporting older Internet Explorer versions\r\n\r\n### What?\r\nExisting options at the time:\r\n* ngRoute module\r\n* External ui-router package\r\n* Leveraging $location (the winner)\r\n* Vanilla JavaScript, non-Angular\r\n\r\n### How?\r\nRemember: Supporting older browsers means no HTML5 History API\r\n\r\nBasic URL format:\r\n`http://host/path#?param1=value1&param2=value2&paramN=valueN`\r\nExamples:\r\n* `?view=productAye`\r\n* `?view=productAye&subview=report`\r\n* `?view=productAye&subview=report&sort=date`\r\n* `?view=productAye&subview=detail`\r\n* `?view=productBee&subview=detail`\r\n* `?view=productBee&subview=detail&row=123`\r\n\r\nEntities:\r\n* Location model: contains the name/value pairs\r\n* Root scope: contains the Location model\r\n* Location service: Built on $location, exposes a register() API\r\n* Child scopes\r\n\r\nComponents (directives) that use browser navigation, define URL parameters by using the Location service's register().\r\nAll bindings to such parameters by any component are done on the Location model.\r\nExample actions:\r\n* Switch views based on URL parameter 'subview': ng-switch on root.locationModel.subview, target 'report' vs 'detail' etc.\r\n* Set sort column indication on a detail table: ng-class on root.locationModel.sort\r\n* More complex actions: $watch a subset of parameters in root.locationModel\r\n\r\nWhen components are destroyed, any parameters they defined are removed from locationModel automatically.\r\nURL parameters with default values, set with register(), are hidden from the URL.\r\n\r\nContracts:\r\n* Child components should not define the same parameter names as a parent. If needed, use namespaces.\r\n* Order of parameters is the order of register() invocations, but not guaranteed. This means navigation within an app generally has good order. But if a bookmark link is navigated to, the order of parameters may change upon navigation, though it won't add an extra navigation.\r\n\r\n### Derived Goals\r\n* Easy to learn and use, both internally (engineering) and externally (marketing)\r\n\r\n### Derived Ungoals\r\n* Internal application (non-URL) routing\r\n* Object-oriented URL routing\r\n* Complexity\r\n\r\n___\r\n## Fiddle Fingers\r\n\r\n### History\r\n* Invented in 2002\r\n* Result of an internal contest at Xilinx, a semiconductor company\r\n\r\n### Inputs\r\n* 4 finger-buttons\r\n* 1 reset\r\n* 1 on-board 555 clock\r\n\r\n### Outputs\r\n* 4 level-LEDs\r\n* 4 value-LEDs\r\n* 1 7-segment score display\r\n\r\n### Description\r\nFiddle Fingers is designed to be used in child development centers, handicapped rehabilitation centers or simply as a toy for all ages. It is a game that tests finger-eye reflex coordination. The game consists of four buttons that the player places their four fingers on, which excludes the thumb.  When the game is started, one LED in four, lights up.  The player then depresses\r\nthe finger that corresponds to the LED.  Then, the lit LED turns off and another one lights up. The player has to then depress that LED button and no other finger.  This process is repeated and gets faster and faster.\r\n\r\nThe aim is to be quick at pressing the button corresponding to the LED that is on.  This tests the player's eye-finger reflex speed.  It is a good tool to improve the coordination of misfortunate disabled people who suffer with respect to hand-eye coordination.\r\n\r\nA display of four LEDs shows the player what level they have achieved.  There are five LEDs. The game starts with none of the four LEDs lit up, hence level 0.  Then 1 lights up as the speed increases, then another and so on till all four are lit up.  Once this level is completed the game stops. It should be very difficult if not impossible to get to this stage.\r\n\r\nAnother display which is a 7-segment display shows the player's current score.  This is a count of how many LED presses the player has missed.  When this reaches six the game ends. Hence, the best player has the least score, and the highest level.\r\n\r\nPossible future modifications are increasing the score limit, cycling through the levels to attain more levels, changing the initial start speed of the game etc.\r\n\r\n### Patent Pending\r\n[figs](http://raviolibhat.github.io/patent_figs.pdf)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}