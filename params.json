{"name":"Ravi Bhat's Projects","tagline":"","body":"## Who am I?\r\n\r\n* Educated in _the_ full-stack: microchips, hardware, web: back-end, front-end, UI/UX.\r\n* Jack-of-all-trades?\r\n* **Web Architect**\r\n* Front-end (my preferred zone): Visually appealing, immediate gratification, human interaction.\r\n* Back-end (forays): Delayed gratification, can get researchy.\r\n* Microchips/Hardware: Heavily delayed gratification.\r\n* Wantrapreneur, in a good way :)\r\n* Technical debt collector.\r\n\r\n___\r\n# Fiddle Fingers\r\n\r\n### History\r\n* Invented by me in 2002\r\n* Result of an internal contest at Xilinx, a semiconductor company\r\n\r\n### Inputs\r\n* 4 finger-buttons\r\n* 1 reset\r\n* 1 on-board 555 clock\r\n\r\n### Outputs\r\n* 4 level-LEDs\r\n* 4 value-LEDs\r\n* 1 7-segment score display\r\n\r\n### Description\r\nFiddle Fingers is designed to be used in child development centers, handicapped rehabilitation centers or simply as a toy for all ages. It is a game that tests finger-eye reflex coordination. The game consists of four buttons that the player places their four fingers on, which excludes the thumb.  When the game is started, one LED in four, lights up.  The player then depresses\r\nthe finger that corresponds to the LED.  Then, the lit LED turns off and another one lights up. The player has to then depress that LED button and no other finger.  This process is repeated and gets faster and faster.\r\n\r\nThe aim is to be quick at pressing the button corresponding to the LED that is on.  This tests the player's eye-finger reflex speed.  It is a good tool to improve the coordination of misfortunate disabled people who suffer with respect to hand-eye coordination.\r\n\r\nA display of four LEDs shows the player what level they have achieved.  There are five LEDs. The game starts with none of the four LEDs lit up, hence level 0.  Then 1 lights up as the speed increases, then another and so on till all four are lit up.  Once this level is completed the game stops. It should be very difficult if not impossible to get to this stage.\r\n\r\nAnother display which is a 7-segment display shows the player's current score.  This is a count of how many LED presses the player has missed.  When this reaches six the game ends. Hence, the best player has the least score, and the highest level.\r\n\r\nPossible future modifications are increasing the score limit, cycling through the levels to attain more levels, changing the initial start speed of the game etc.\r\n\r\n### Patent Application\r\n[figs](http://raviolibhat.github.io/patent_figs.pdf)\r\n\r\n___\r\n![funny](http://raviolibhat.github.io/SantaPoitras1.jpg)\r\n# Easy URL Hash Routing with AngularJS\r\n\r\n### Goals\r\n* URL Hash Routing Service\r\n* Drive web application state from the URL\r\n\r\n### Why?\r\n* Browsing within a Single Page Application\r\n* Supporting browser back, forward, refresh buttons\r\n* Bookmarking and linking from other pages\r\n\r\n### When?\r\n2013, supporting older Internet Explorer versions\r\n\r\n### What?\r\nExisting options at the time:\r\n* ngRoute module\r\n* External ui-router package\r\n* Leveraging $location (the winner)\r\n* Vanilla JavaScript, non-Angular\r\n\r\n### How?\r\nRemember: Supporting older browsers means no HTML5 History API\r\n\r\nBasic URL format:\r\n\r\n`http://host/path#?param1=value1&param2=value2&paramN=valueN`\r\n\r\nExamples:\r\n* `?product=analytics`\r\n* `?product=analytics&view=report`\r\n* `?product=analytics&view=report&sort=date`\r\n* `?product=analytics&view=detail`\r\n* `?product=finance&view=detail`\r\n* `?product=finance&view=detail&filter=abc`\r\n\r\nEntities:\r\n* Location model: contains the name/value pairs\r\n* Root scope: contains the Location model\r\n* Location service: Built on $location, exposes a register() API\r\n* Child scopes\r\n\r\nComponents (directives) that use browser navigation, define URL parameters by using the Location service's register().\r\nAll bindings to such parameters by any component are done on the Location model.\r\nExample actions:\r\n* Switch views based on URL parameter 'view': ng-switch on $root.locationModel.view, target 'report' vs 'detail' etc.\r\n\r\n\t\t<div ng-switch=\"$root.locationModel.view\">\r\n\t\t\t<overview ng-switch-when=\"overview\"></overview>\r\n\t\t\t<report ng-switch-when=\"report\"></report>\r\n\t\t\t<detail ng-switch-when=\"detail\"></detail>\r\n\t\t</div>\r\n\r\n* Set sort column indication on a detail table: ng-class on $root.locationModel.sort\r\n\r\n\t\t<div ng-class=\"{'sorted-col': col==$root.locationModel.sort}\"></div>\r\n\r\n* More complex actions: $watch a subset of parameters in $root.locationModel\r\n\r\n\t\t$scope.$watch(\r\n\t\t\tfunction() {\r\n\t\t\t\tvar locationModel = angular.copy($rootScope.locationModel);\r\n\t\t\t\tdelete locationModel.filter;\r\n\t\t\t\tdelete locationModel.sort;\r\n\r\n\t\t\t\treturn locationModel;\r\n\t\t\t},\r\n\t\t\tfunction() {\r\n\t\t\t\t// do things independent of a filter or sorting change\r\n\t\t\t},\r\n\t\t\ttrue\r\n\t\t);\r\n\r\nWhen components are destroyed, any parameters they defined are removed from locationModel automatically.\r\nURL parameters with default values, set with register(), are hidden from the URL.\r\n\r\nCode:\r\n\r\n\t// used to provide browser history support: two-way binds the location params with a model\r\n\tangular.module('my.services', []).factory('myLocation', ['$rootScope', '$location', function($rootScope, $location) {\r\n\r\n\t\tvar locationModel = {};\r\n\t\t$rootScope.locationModel = locationModel;\r\n\r\n\t\tvar paramDefaults = {};\r\n\r\n\t\tvar updateLocationModel = function() {\r\n\r\n\t\t\tvar locationParams = $location.search();\r\n\r\n\t\t\t// take location params and update the model, setting defaults as needed\r\n\t\t\tfor (var param in paramDefaults) {\r\n\r\n\t\t\t\tif (param in locationParams) {\r\n\t\t\t\t\tif (typeof paramDefaults[param] == \"number\") {\r\n\t\t\t\t\t\tlocationModel[param] = parseInt(locationParams[param]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocationModel[param] = locationParams[param];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlocationModel[param] = paramDefaults[param];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// copy any remaining non-default location params\r\n\t\t\tfor (var param in locationParams) {\r\n\r\n\t\t\t\tif (!(param in paramDefaults)) {\r\n\t\t\t\t\tlocationModel[param] = locationParams[param];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar updateLocationSearch = function() {\r\n\r\n\t\t\tvar replaceLocation = true;\r\n\t\t\tvar oldLocationParams = $location.search();\r\n\t\t\tvar locationParams = {};\r\n\r\n\t\t\t// only include non-default parameters in location.search\r\n\t\t\tfor (var param in paramDefaults) {\r\n\r\n\t\t\t\tif (locationModel[param] != paramDefaults[param]) {\r\n\t\t\t\t\tlocationParams[param] = locationModel[param];\r\n\r\n\t\t\t\t\tif (locationParams[param] != oldLocationParams[param]) {\r\n\t\t\t\t\t\treplaceLocation = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// also include any remaining params\r\n\t\t\tfor (var param in locationModel) {\r\n\r\n\t\t\t\tif (!(param in paramDefaults)) {\r\n\t\t\t\t\tlocationParams[param] = locationModel[param];\r\n\r\n\t\t\t\t\tif (locationParams[param] != oldLocationParams[param]) {\r\n\t\t\t\t\t\treplaceLocation = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.keys(locationParams).length == 0) {\r\n\t\t\t\t// prevent an infinite digest (see Angular issues 9635 and 10228)\r\n\t\t\t\t// ...remove after Angular upgrade fixes bug.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (replaceLocation) {\r\n\t\t\t\t$location.replace();\r\n\t\t\t}\r\n\r\n\t\t\t$location.search(locationParams);\r\n\t\t};\r\n\r\n\t\tvar registrations = 0;\r\n\t\tvar deregistrationToFunction = null;\r\n\t\tvar deregistrationFroFunction = null;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tregister: function($scope, scopeParamDefaults) {\r\n\r\n\t\t\t\tangular.extend(paramDefaults, scopeParamDefaults);\r\n\r\n\t\t\t\tupdateLocationModel();\r\n\r\n\t\t\t\tif (registrations == 0) {\r\n\t\t\t\t\t// bind location.search params to model\r\n\t\t\t\t\tderegistrationToFunction = $rootScope.$on('$locationChangeStart', updateLocationModel);\r\n\r\n\t\t\t\t\t// bind model to location.search params\r\n\t\t\t\t\tderegistrationFroFunction = $rootScope.$watchCollection(\"ns.locationModel\", updateLocationSearch);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tregistrations++;\r\n\r\n\t\t\t\t$scope.$on(\"$destroy\", function() {\r\n\r\n\t\t\t\t\tfor (var param in scopeParamDefaults) {\r\n\t\t\t\t\t\tdelete locationModel[param];\r\n\t\t\t\t\t\tdelete paramDefaults[param];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tregistrations--;\r\n\r\n\t\t\t\t\tif (registrations == 0) {\r\n\t\t\t\t\t\tderegistrationToFunction();\r\n\t\t\t\t\t\tderegistrationFroFunction();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}])\r\n\r\nContracts:\r\n* Child components should not define the same parameter names as a parent. If needed, use namespaces.\r\n* Order of parameters is the order of register() invocations, but not guaranteed. This means navigation within an app generally has good order. But if a bookmark link is navigated to, the order of parameters may change upon navigation, though it won't add an extra navigation.\r\n\r\n### Derived Goals\r\n* Easy to learn and use, both internally (engineering) and externally (marketing)\r\n\r\n### Derived Ungoals\r\n* Internal application (non-URL) routing\r\n* Parameter collision\r\n* Complexity\r\n\r\n___\r\n# Inheritance patterns in JavaScript and AngularJS (and some Python)\r\n\r\n### SubClassing\r\n* Traditional\r\n* Computer Sciencey\r\n* ES6 'class' keyword\r\n* used below as \"inheritance\"\r\n* Example: Dogs and Cats are Animals. Dogs cannot meow(). Cats cannot bark().\r\n\r\n\t\tvar Animal = function(){};\r\n\t\tAnimal.prototype = { walk: function(){} };\r\n\t\t\r\n\t\tvar Dog = function(){};\r\n\t\tDog.prototype = Object.create(Animal.prototype);\r\n\t\tDog.prototype.bark = function(){};\r\n\t\t\r\n\t\tvar Cat = function(){};\r\n\t\tCat.prototype = Object.create(Animal.prototype);\r\n\t\tCat.prototype.meow = function(){};\r\n\t\t\r\n\t\tvar dog = new Dog;\r\n\t\tvar cat = new Cat;\r\n\t\t\r\n\t\tdog instanceof Animal; // true\r\n\t\tdog instanceof Dog; // true\r\n\t\tdog instanceof Cat; // false\r\n\t\tdog.bark; // defined\r\n\t\tdog.meow; // undefined\r\n\r\n### SubInstancing\r\n* \"Dynamic SubClassing\"\r\n* Uses angular.extend(), copying traits over\r\n* ES6 Object.assign()\r\n* used below as \"mixin\"\r\n* Example: Animals can be Dogs or Cats, given their traits of bark() and meow().\r\n\r\n\t\t// from example above\r\n\t\tdog.meow = cat.meow;\r\n\t\tdog.meow; // Now defined. But conflicts with instanceof operator result of Cat.\r\n\t\t\r\n\t\t// use of mixins\r\n\t\tvar dogMixin = { bark: function(){} };\r\n\t\tvar catMixin = { meow: function(){} };\r\n\t\t\r\n\t\tvar animal = { walk: function(){} };\r\n\t\tvar dog = angular.extend({}, animal, dogMixin);\r\n\t\tvar cat = angular.extend({}, animal, catMixin);\r\n\t\tdog.bark; // defined\r\n\t\tdog.meow; // undefined\r\n\t\t// The instanceof operator can't be used. Instead, error out or use duck-typing.\r\n\r\n### Controllers\r\nUsing inheritance and/or mixins:\r\n\r\n\tangular.module('my.services', []).factory('myClass', function() {\r\n\t\r\n\t\tvar BaseController = function() {\r\n\t\r\n\t\t\tthis.modelDef = null;\r\n\t\t};\r\n\t\tBaseController.prototype.setupModel = function() {\r\n\t\r\n\t\t\tvar process = function(modelDef) {\r\n\t\t\t\t// process modelDef into model\r\n\t\t\t};\r\n\t\t\tthis.model = process(this.modelDef);\r\n\t\t};\r\n\t\r\n\t\treturn {\r\n\t\t\tBaseController: BaseController\r\n\t\t};\r\n\t});\r\n\t\r\n\tangular.module('my.services', []).factory('myMixin', ['restData', function(restData) {\r\n\t\r\n\t\tvar tabulate = function() {\r\n\t\t\t// tabulate the list-type models from this.modelDefs\r\n\t\t};\r\n\t\r\n\t\tvar restify = function() {\r\n\t\t\t// call back-end services via restData service\r\n\t\t};\r\n\t\r\n\t\t// no prototype functions\r\n\t\treturn {\r\n\t\t\ttabulate: tabulate,\r\n\t\t\trestify: restify\r\n\t\t};\r\n\t}]);\r\n\t\r\n\tangular.module('my.directives', ['my.services'])\r\n\t\t.directive('myReport', ['myClass', function(myClass) {\r\n\t\r\n\t\t\tvar SubController = function($filter, myMixin) {\r\n\t\r\n\t\t\t\tmyClass.BaseController.apply(this);\r\n\t\r\n\t\t\t\tangular.extend(this, myMixin); // mix in to controller-bound scope\r\n\t\r\n\t\t\t\tthis.modelDef = {\r\n\t\t\t\t\t// set of model definitions\r\n\t\t\t\t};\r\n\t\t\t\tthis.setupModel();\r\n\t\t\t};\r\n\t\t\tSubController.prototype = Object.create(myClass.BaseController.prototype);\r\n\t\t\tSubController.$inject = ['$filter', 'myMixin'];\r\n\t\r\n\t\t\treturn {\r\n\t\t\t\tscope: {\r\n\t\t\t\t\t// scope props\r\n\t\t\t\t},\r\n\t\t\t\ttemplateUrl: '/path/file.html',\r\n\t\r\n\t\t\t\tcontroller: SubController,\r\n\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\tbindToController: true,\r\n\t\r\n\t\t\t\tlink: function ($scope, $element, $attrs) {\r\n\t\t\t\t\t// do things\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}]);\r\n\r\nDecorator pattern:\r\n\r\n\tangular.module('my', ['my.services'])\r\n\t\t.decorator('$controller', ['myMixin', '$delegate', function (myMixin, $delegate) {\r\n\t\r\n\t\t\treturn function (constructor, locals) {\r\n\t\r\n\t\t\t\tvar controller = $delegate.apply(null, arguments);\r\n\t\r\n\t\t\t\treturn angular.extend(function () {\r\n\t\r\n\t\t\t\t\treturn angular.extend(controller(), myMixin); // mix in to controller-bound scopes\r\n\t\r\n\t\t\t\t\t// one can also do things to the instance of controller() based on the type of 'constructor'\r\n\t\r\n\t\t\t\t}, controller);\r\n\t\t\t};\r\n\t\t}]);\r\n\r\n### Services\r\nUsing inheritance:\r\n\r\n\tangular.module('my.services', []).factory('mySubClass', ['myClass', function() {\r\n\t\r\n\t\tvar SubController = function($filter) {\r\n\t\r\n\t\t\tmyClass.BaseController.apply(this);\r\n\t\r\n\t\t\tthis.modelDef = {\r\n\t\t\t\t// set of model definitions\r\n\t\t\t};\r\n\t\t\tthis.setupModel();\r\n\t\t};\r\n\t\tSubController.prototype = Object.create(myClass.BaseController.prototype);\r\n\t\r\n\t\treturn {\r\n\t\t\tSubController: SubController\r\n\t\t};\r\n\t}]);\r\n\r\nDecorator pattern:\r\n\r\n\tangular.module('my', [])\r\n\t\t.decorator('myService', function ($delegate) {\r\n\t\r\n\t\t\treturn function() {\r\n\t\t\t\t// do things\r\n\t\t\t\treturn $delegate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n### Directives\r\n* Using inheritance and/or mixins: By inheriting directive controllers as opposed to directives: see myReport directive above.\r\n* Using the 'require' parameter in the directive definition, for directive controller dependencies.\r\n* Directive wrapping: <http://thaiat.github.io/blog/2014/03/10/extending-an-existing-directive-in-angularjs/>\r\n\r\nDecorator pattern:\r\n\r\n\tangular.module('my', [])\r\n\t\t.decorator('myReportDirective', function ($delegate) {\r\n\t\t\t\r\n\t\t\t// do things\r\n\t\t\treturn $delegate;\r\n\t\t});\r\n\r\nNote: There is no $directive service like there is $controller (above), so you can't blanket all directives that way.\r\n\r\n### JavaScript Inheritance\r\n* Everything's derived from Object, including Class and Instance\r\n* Allows for SubInstances in addition to SubClasses\r\n* Multiple inheritance by mixins, i.e. copy multiple traits over: works due to the two points above\r\n* Flexible\r\n\r\n### Python Inheritance (I'm not an expert)\r\n* Class is separate from Instance\r\n* Does not allow for SubInstances\r\n* Multiple inheritance (for Class) is built into syntax\r\n\r\n### When Inheritance breaks down\r\n* Deep inheritance hierarchies that create rigid dependencies that are very difficult to break when requirements change\r\n* JavaScript's flexibility may alleviate rigidity by providing crutches while the hierarchies are reworked, but this needs to be short-term only\r\n* In Python, maybe preplan for retiring old things and starting anew","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}